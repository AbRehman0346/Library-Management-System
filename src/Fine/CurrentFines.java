/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fine;

import General.DoubleClickDetector;
import static LMS.MainForm.con;
import java.sql.ResultSet;
import java.sql.PreparedStatement;
import static LMS.MainForm.connection;
import javax.swing.table.DefaultTableModel;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
//import AR_PopupMenu.PopupMenu;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.ImageIcon;
import LMS.MainForm;

/**
 *
 * @author Abdul Rehman
 */
public class CurrentFines extends javax.swing.JFrame {

    PreparedStatement ps;
    DefaultTableModel tm;
    DoubleClickDetector doubleclick = new DoubleClickDetector();
//    PopupMenu menu;
    public static CurrentFines object;

    /**
     * Creates new form CurrentFines
     */
    public CurrentFines() {
        initComponents();
        tm = (DefaultTableModel) tbl.getModel();
//        menu = new PopupMenu();
        btnRefresh.setIcon(MainForm.setImage(getClass().getResource("/IconsUsed/RefreshIcon.jpg"), btnRefresh.getWidth(), btnRefresh.getHeight()));
        try {
            setTableData(getTableData());
        } catch (SQLException | ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CurrentFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        addingPopupMenus();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tfSearch = new javax.swing.JTextField();
        btnPay = new javax.swing.JButton();
        btnRestore = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Current Fines");

        tbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fine ID", "Name", "Book", "Mber: Category", "Fine", "Purpose", "Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl.getTableHeader().setReorderingAllowed(false);
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 51, 0));
        jLabel7.setText("Current Fines");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel12.setText("Search:");

        tfSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        btnPay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPay.setText("Pay");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        btnRestore.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnRestore.setText("Restore");
        btnRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestoreActionPerformed(evt);
            }
        });

        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1246, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnRestore))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(jLabel12)
                                .addGap(4, 4, 4)
                                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(280, 280, 280)
                                .addComponent(jLabel7)))
                        .addGap(470, 470, 470)
                        .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(btnPay, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(7, 7, 7))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(jLabel12))
                                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(17, 17, 17))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 509, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRestore)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private ResultSet getTableData() throws SQLException, ClassNotFoundException {
        connection();
        ps = con.prepareStatement("SELECT F.ID, CONCAT(SD.FIRST_NAME, ' ', SD.LAST_NAME) AS `NAME`, CONCAT(B.TITLE, ' ', B.AUTHOR) AS BOOK, F.FINE, sd.GROUP, \n"
                + "F.PURPOSE, F.`DATE`, F.`STATUS` FROM FINE F\n"
                + "LEFT JOIN STUDENT_DATA SD ON SD.ID = F.STUDENT_ID\n"
                + "LEFT JOIN BOOK B ON B.ID = F.BOOK_ID "
                + "WHERE f.STATUS = 'Unpaid' order by f.id desc");
        ResultSet rs = ps.executeQuery();
        return rs;
    }

    private void setTableData(ResultSet rs) throws SQLException {
        tm.setRowCount(0);
        while (rs.next()) {
            Vector v = new Vector();
            v.add(rs.getString("ID"));
            v.add(rs.getString("NAME"));
            v.add(rs.getString("BOOK"));
            v.add(rs.getString("group"));
            v.add(rs.getString("FINE"));
            v.add(rs.getString("PURPOSE"));
            v.add(rs.getString("DATE"));
            v.add(rs.getString("STATUS"));
            tm.addRow(v);
        }
    }

    private void setTableData() throws SQLException, ClassNotFoundException{
        setTableData(getTableData());
    }
    
    private void addingPopupMenus() {
//        menu.addOption("Edit", new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent a) {
//                int selectedRow = tbl.getSelectedRow();
//                String fineId = (String) tm.getValueAt(selectedRow, NORMAL);
//                new Edit(fineId).setVisible(true);
//            }
//        }, new ImageIcon(getClass().getResource("/IconsUsed/edit.jpg")));
//
//        menu.addOption("Restored", new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                try {
//                    if (JOptionPane.showConfirmDialog(null, "Have You Returned the Book?", "Restore Book",
//                            JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
//                        connection();
//                        String fineId = (String) tbl.getValueAt(tbl.getSelectedRow(), NORMAL);
//                        String bookId;
//                        ps = con.prepareStatement("SELECT book_id FROM FINE WHERE ID = " + fineId);
//                        ResultSet rs = ps.executeQuery();
//                        if (rs.next()) {
//                            bookId = rs.getString("book_id");
//                            ps = con.prepareStatement("UPDATE FINE SET STATUS = 'Restored' WHERE ID = '" + fineId + "'");
//                            ps.execute();
//
//                            ps = con.prepareStatement("UPDATE BOOK SET `STATUS` = 'Available' WHERE `ID` = '" + bookId + "'");
//                            ps.execute();
//
//                            setTableData(getTableData());
//                            CommonFunction.ReservationFunctions r = new CommonFunction.ReservationFunctions();
//                            String reservation = r.getFullReservationOf(bookId);
//                            if (reservation != null) {
//                                JOptionPane.showMessageDialog(null, "This Book is Reserved for " + reservation);
//                            }
//                        } else {
//                            JOptionPane.showMessageDialog(null, "This Fine Can't be Restored because it is not conserned to any book lost.", "Error", JOptionPane.ERROR_MESSAGE);
//                        }
//                    }
//                } catch (SQLException | ClassNotFoundException ex) {
//                    Logger.getLogger(CurrentFines.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//        menu.show(tbl);
    }

    private void refresh() {
        tfSearch.setText("");
        try {
            setTableData(getTableData());
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(CurrentFines.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    protected void search() {
        String search = tfSearch.getText();
        try {
            if (search.equals("")) {
                setTableData(getTableData());
            } else {
                connection();
                ps = con.prepareStatement("SELECT F.ID, CONCAT(SD.FIRST_NAME, ' ', SD.LAST_NAME) AS `NAME`, CONCAT(B.TITLE, ' ', B.AUTHOR) AS BOOK, F.FINE, sd.`group`,\n"
                        + "F.PURPOSE, F.`DESCRIPTION`, F.`DATE`, F.`STATUS` FROM FINE F\n"
                        + "LEFT JOIN STUDENT_DATA SD ON SD.ID = F.STUDENT_ID\n"
                        + "LEFT JOIN BOOK B ON B.ID = F.BOOK_ID\n"
                        + "WHERE (F.ID REGEXP '" + search + "' OR\n"
                        + "STUDENT_ID REGEXP '" + search + "' OR\n"
                        + "`FIRST_NAME` REGEXP '" + search + "' OR\n"
                        + "`LAST_NAME` REGEXP '" + search + "' OR\n"
                        + "BOOK_ID REGEXP '" + search + "' OR\n"
                        + "TITLE REGEXP '" + search + "' OR\n"
                        + "AUTHOR REGEXP '" + search + "' OR\n"
                        + "F.FINE REGEXP '" + search + "' OR\n"
                        + "`PURPOSE` REGEXP '" + search + "' OR\n"
                        + "`DESCRIPTION` REGEXP '" + search + "' OR\n"
                        + "sd.`GROUP` REGEXP '" + search + "' OR\n"
                        + "F.`DATE` REGEXP '" + search + "') AND (\n"
                        + "F.`STATUS` REGEXP 'Unpaid') ORDER BY ID DESC");
                ResultSet rs = ps.executeQuery();
                setTableData(rs);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            System.out.println(ex);
        }
    }

    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        search();
    }//GEN-LAST:event_tfSearchKeyReleased

    private void btnRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestoreActionPerformed
//        This Method restores the fine by setting the book status to available if it is unavailable and 
//        it sets the fine status to restored. Means student has found the book and no he is going to return it 
//        Means the book is also returned and available in library...
        String msg = "Do You Want to Restore the Fine";
        if (JOptionPane.showConfirmDialog(this, msg, "Restore Fine", JOptionPane.YES_NO_OPTION, 
                JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION){
                try {
                    String fineId = (String) tbl.getValueAt(tbl.getSelectedRow(), NORMAL);
                    String bookId = "";
                    String bookStatus = "";

                    connection();
                    
                    //Getting Book Id From Fine Table...
                    ps = con.prepareStatement("SELECT book_Id AS BID FROM fine where id = "+fineId+"");
                    ResultSet rs = ps.executeQuery();
                    if (rs.next()){
                        bookId = rs.getString("bid");
                        
                        //Getting Book Status...
                        ps = con.prepareStatement("SELECT status as s FROM BOOK WHERE ID = '"+bookId+"'");
                        ResultSet rsBookStatus = ps.executeQuery();
                        if (rsBookStatus.next())
                            bookStatus = rsBookStatus.getString("s");
                    }

                    if (bookStatus.equals("Unavailable")){
                        ps = con.prepareStatement("UPDATE BOOK SET `STATUS` = 'Available' WHERE id = '"+bookId+"';");
                        ps.execute();
                    }
                    
                    ps = con.prepareStatement("UPDATE FINE SET `STATUS` = 'Restored' WHERE ID = '"+fineId+"'");
                    if (!ps.execute())
                        setTableData();

            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(CurrentFines.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_btnRestoreActionPerformed

    private void payFine(){
        FineFunctions f = new FineFunctions();
        String fineId = (String) tbl.getValueAt(tbl.getSelectedRow(), NORMAL);

        String studentId = "";
        String studentName = "";

        try {
            connection();
            {//Checking if the fine is paid late so member has to pay late fine.
               if (new Fine.FineFunctions().isLateFineApply(fineId)){
                   new LateFinePay(fineId).setVisible(true);
                   return;
               }
            }
            
            
            ps = con.prepareStatement("SELECT STUDENT_ID AS SID, CONCAT(FIRST_NAME, ' ', LAST_NAME) AS `NAME` FROM FINE F \n"
                    + "JOIN STUDENT_DATA SD ON F.STUDENT_ID = SD.ID "
                    + "WHERE F.ID = '" + fineId + "'");
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                studentId = rs.getString("sid");
                studentName = rs.getString("name");
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(CurrentFines.class.getName()).log(Level.SEVERE, null, ex);
        }

        String gender = f.getGender(studentId);

        String message = "Has " + gender + studentName + " paid the Fine?";
        try {
            if (JOptionPane.showConfirmDialog(this, message, "Paying Fine", JOptionPane.YES_NO_OPTION,
                    JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                
                f.payFine(fineId);
                search();
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(CurrentFines.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        payFine();
//        FineFunctions f = new FineFunctions();
//        String fineId = (String) tbl.getValueAt(tbl.getSelectedRow(), NORMAL);
//
//        String studentId = "";
//        String studentName = "";
//
//        try {
//            connection();
//            {//Checking if the fine is paid late so member has to pay late fine.
//               if (new Fine.FineFunctions().isLateFineApply(fineId)){
//                   new LateFinePay(fineId).setVisible(true);
//                   return;
//               }
//            }
//            
//            
//            ps = con.prepareStatement("SELECT STUDENT_ID AS SID, CONCAT(FIRST_NAME, ' ', LAST_NAME) AS `NAME` FROM FINE F \n"
//                    + "JOIN STUDENT_DATA SD ON F.STUDENT_ID = SD.ID "
//                    + "WHERE F.ID = '" + fineId + "'");
//            ResultSet rs = ps.executeQuery();
//            if (rs.next()) {
//                studentId = rs.getString("sid");
//                studentName = rs.getString("name");
//            }
//        } catch (SQLException | ClassNotFoundException ex) {
//            Logger.getLogger(CurrentFines.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        String gender = f.getGender(studentId);
//
//        String message = "Has " + gender + studentName + " paid the Fine?";
//        try {
//            if (JOptionPane.showConfirmDialog(this, message, "Paying Fine", JOptionPane.YES_NO_OPTION,
//                    JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
//                
//                f.payFine(fineId);
//                search();
//            }
//        } catch (SQLException | ClassNotFoundException ex) {
//            Logger.getLogger(CurrentFines.class.getName()).log(Level.SEVERE, null, ex);
//        }
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refresh();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        if (LMS.All_Information.doubleClick.detectDoubleClick() && LMS.All_Information.doPayFineOnDoubleClick){
            payFine();
        }    
    }//GEN-LAST:event_tblMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CurrentFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CurrentFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CurrentFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CurrentFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CurrentFines().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPay;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRestore;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables

}
