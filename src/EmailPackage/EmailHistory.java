/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EmailPackage;

import java.awt.Color;
import static LMS.MainForm.connection;
import static LMS.MainForm.con;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import static LMS.MainForm.focusGainedLogic;
import static LMS.MainForm.focusLostLogic;
import javax.swing.JOptionPane;
import Abdul_Rehmancom.company.EncryptPassword;

/**
 *
 * @author Abdul Rehman
 */
public class EmailHistory extends javax.swing.JFrame {
    DefaultTableModel tm;
    PreparedStatement ps;
    
    /**
     * Creates new form History
     */
    public EmailHistory() {
        initComponents();
        tm = (DefaultTableModel) tbl.getModel();
        settblData("");
        taEmail.setEditable(false);
        
        {//Centering the columns of table.
            int[] columns = {2, 5, 6, 8};
            new LMS.All_Information(true).centeringColumnsOfTables(tbl, columns);
        }
    }
    
    private void settblData(String limitClause){
        EncryptPassword ep = new EncryptPassword();
        try {
            int recordCount = 0;
            tm.setRowCount(0);
            connection();
            ps = con.prepareStatement("SELECT e.id, sender, member_id, first_name, last_name, receiver, `date`, `time`, purpose, `status` FROM email e\n" +
                    "LEFT JOIN LMS.STUDENT_DATA sd ON sd.id = e.member_id\n" +
                    "ORDER BY E.ID DESC " + limitClause);
            ResultSet rs = ps.executeQuery();
            while (rs.next()){
                Vector v = new Vector();
                v.add(rs.getString("id"));
                v.add(ep.Encrypt(rs.getString("sender")));
                
                String memberId = rs.getString("MEMBER_ID");
                v.add(memberId);
                
                String name = rs.getString("first_name") + " " + rs.getString("last_name");
                
                String recepient = ep.Encrypt(rs.getString("receiver"));
                if (memberId == null){
                    v.add("");
                    v.add(recepient);
                }
                else if (name.equals("null null")){
                    v.add("Multiple Students");
                    v.add("Multiple Emails");
                }
                else{
                    v.add(name);
                    v.add(recepient);
                }
                
                v.add(rs.getString("date"));
                v.add(rs.getString("time"));
                v.add(rs.getString("purpose"));
                v.add(rs.getString("status"));
                tm.addRow(v);
                recordCount++;
            }
            lblRecords.setText("Records: " + recordCount);
        } catch (java.sql.SQLSyntaxErrorException e){
            cbRecords.setSelectedIndex(0);
            tfSearch.setText("Search");
            Logger.getLogger(EmailHistory.class.getName()).log(Level.SEVERE, null, e);
//            JOptionPane.showMessageDialog(this, "Enter Only Numbers.", "Wrong Input.", JOptionPane.ERROR_MESSAGE);
        } 
        catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(EmailHistory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        btnClearHistory = new javax.swing.JButton();
        tfSearch = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        cbRecords = new javax.swing.JComboBox<>();
        btnRecordSearch = new javax.swing.JButton();
        lblRecords = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        taEmail = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("History");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Email ID", "Sender", "Member ID", "Name", "Member Email", "Date", "Time", "Purpose", "Status"
            }
        ));
        tbl.getTableHeader().setReorderingAllowed(false);
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        btnClearHistory.setBackground(new java.awt.Color(204, 204, 204));
        btnClearHistory.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnClearHistory.setMnemonic('C');
        btnClearHistory.setText("Delete");
        btnClearHistory.setBorder(null);
        btnClearHistory.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClearHistory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnClearHistoryMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnClearHistoryMouseExited(evt);
            }
        });
        btnClearHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearHistoryActionPerformed(evt);
            }
        });

        tfSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tfSearch.setText("Search");
        tfSearch.setToolTipText("");
        tfSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfSearchFocusLost(evt);
            }
        });
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(153, 153, 153));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        cbRecords.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cbRecords.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Records", "First 10 Records", "First 20 Records", "Custom" }));
        cbRecords.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRecordsActionPerformed(evt);
            }
        });

        btnRecordSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRecordSearch.setText("Search");
        btnRecordSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRecordSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRecordSearch)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRecordSearch)
                    .addComponent(cbRecords, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        lblRecords.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblRecords.setText("Records");

        taEmail.setColumns(20);
        taEmail.setRows(5);
        jScrollPane2.setViewportView(taEmail);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Email");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblRecords, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(388, 388, 388)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(btnClearHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 190, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(160, 160, 160))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1072, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnClearHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(7, 7, 7)
                                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(14, 14, 14)
                                    .addComponent(lblRecords))
                                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnClearHistoryMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearHistoryMouseEntered
        btnClearHistory.setBackground(new Color(153,153,153));
    }//GEN-LAST:event_btnClearHistoryMouseEntered

    private void btnClearHistoryMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearHistoryMouseExited
        btnClearHistory.setBackground(new Color(204, 204, 204));
    }//GEN-LAST:event_btnClearHistoryMouseExited

    private void tfSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfSearchFocusGained
        tfSearch.setText(focusGainedLogic(tfSearch.getText(), "Search"));
    }//GEN-LAST:event_tfSearchFocusGained

    private void tfSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfSearchFocusLost
        tfSearch.setText(focusLostLogic(tfSearch.getText(), "Search"));
    }//GEN-LAST:event_tfSearchFocusLost

    private void tfSearchKeyReleasedLogic(String limitClause) {
        EncryptPassword ep = new EncryptPassword();
        try{
            String search = tfSearch.getText();
            tm.setRowCount(0);
            connection();
            if (!(search.equals("") || search.equals("Search"))){
                ps = con.prepareStatement("SELECT e.id, sender, member_id, first_name, last_name, receiver, `date`, `time`, purpose, `status` FROM email e\n" +
                        "LEFT JOIN STUDENT_DATA  sd ON  e.member_id = sd.id\n" +
                        "WHERE sender REGEXP '"+ep.Encrypt(search)+"' OR\n" +
                        "member_id REGEXP '"+search+"' OR\n" +
                        "first_name REGEXP '"+search+"' OR\n" +
                        "last_name REGEXP '"+search+"' OR\n" +
                        "receiver REGEXP '"+ep.Encrypt(search)+"' OR\n" +
                        "`date` REGEXP '"+search+"' OR\n" +
                        "`time` REGEXP '"+search+"' OR \n" +
                        "purpose REGEXP '"+search+"' OR\n" +
                        "`status` REGEXP '"+search+"'\n" +
                        "ORDER BY e.ID DESC" + limitClause);
                ResultSet rs = ps.executeQuery();
                while (rs.next()){
                    Vector v = new Vector();
                    v.add(rs.getString("id"));
                    v.add(ep.Encrypt(rs.getString("sender")));
                    v.add(rs.getString("member_id"));
                    v.add(rs.getString("first_name") + " " + rs.getString("last_name"));
                    v.add(ep.Encrypt(rs.getString("receiver")));
                    v.add(rs.getString("date"));
                    v.add(rs.getString("time"));
                    v.add(rs.getString("purpose"));
                    v.add(rs.getString("status"));
                    tm.addRow(v);
                }
            }else
                settblData(limitClause);
        } catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
    }
    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        tfSearchKeyReleasedLogic("");
    }//GEN-LAST:event_tfSearchKeyReleased

    boolean isCbRecordsEditable = false;
    private void btnRecordSearchActionPerformed(){
        if (isCbRecordsEditable){tfSearchKeyReleasedLogic("Limit " + cbRecords.getSelectedItem());}
        switch (cbRecords.getSelectedIndex()){
            case 0 -> {tfSearchKeyReleasedLogic("");}
            case 1 -> {tfSearchKeyReleasedLogic("Limit 10");}
            case 2 -> {tfSearchKeyReleasedLogic("Limit 20");}
        }
    }
    
    private void btnRecordSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRecordSearchActionPerformed
        btnRecordSearchActionPerformed();
    }//GEN-LAST:event_btnRecordSearchActionPerformed

    
    private void cbRecordsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRecordsActionPerformed
        if (cbRecords.getSelectedIndex() == 3){
            isCbRecordsEditable = true;
            cbRecords.setEditable(true);
            cbRecords.setSelectedItem(null);
        }
        else
            cbRecords.setEditable(false);
        
        // Making isCbRecordsEditable false...
        switch (cbRecords.getSelectedIndex()){
            case 0 -> {isCbRecordsEditable = false;}
            case 1 -> {isCbRecordsEditable = false;}
            case 2 -> {isCbRecordsEditable = false;}
        }
    }//GEN-LAST:event_cbRecordsActionPerformed

    public boolean btnClearHistoryActionPerformedLogic(int[] recordIds){
        String whereClause = "WHERE id IN (" + recordIds[0];
        for (int i=1; i<recordIds.length; i++)
            whereClause += "," + recordIds[i];
        
        try {
            connection();
            ps = con.prepareStatement("DELETE FROM email\n" +
                                    whereClause+")");
            return !ps.execute();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(EmailHistory.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }
    
    private void btnClearActionPerformed(){
        if (!tbl.getSelectionModel().isSelectionEmpty()){
            int[] selectedRowsIds = new int[tbl.getSelectedRows().length];
            int index = 0;
            for (int i : tbl.getSelectedRows()){
                selectedRowsIds[index] = Integer.parseInt(tm.getValueAt(i, NORMAL).toString());
                index++;
            }
            if (btnClearHistoryActionPerformedLogic(selectedRowsIds))
                btnRecordSearchActionPerformed();
        }else
            JOptionPane.showMessageDialog(this, "Nothing Selected From table.", "Delete Emails", JOptionPane.ERROR_MESSAGE);    
    }
    private void btnClearHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearHistoryActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Do You Want to Clear History", "Clear History", JOptionPane.WARNING_MESSAGE, JOptionPane.YES_NO_OPTION) == 
                JOptionPane.YES_OPTION)
            
            btnClearActionPerformed();
    }//GEN-LAST:event_btnClearHistoryActionPerformed

    private void displayEmail() {
        try {
            connection();
            ps = con.prepareStatement("SELECT EMAIL FROM EMAIL WHERE ID = " + tm.getValueAt(tbl.getSelectedRow(), NORMAL));
            ResultSet rs = ps.executeQuery();
            while (rs.next()){
                taEmail.setText(rs.getString("email").replaceAll("<br>", "\n").replaceAll("\\<.*?\\>", ""));
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(EmailHistory.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        displayEmail();
    }//GEN-LAST:event_tblMouseClicked

    private void tblMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseReleased
        displayEmail();
    }//GEN-LAST:event_tblMouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmailHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmailHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmailHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmailHistory.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmailHistory().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearHistory;
    private javax.swing.JButton btnRecordSearch;
    private javax.swing.JComboBox<String> cbRecords;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblRecords;
    private javax.swing.JTextArea taEmail;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
