/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fine;

import static LMS.MainForm.connection;
import static LMS.MainForm.con;
import LMS.NewException;
import static java.awt.Frame.NORMAL;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.util.Vector;
import javax.swing.JOptionPane;
//import AR_PopupMenu.PopupMenu;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.JMenuItem;

/**
 *
 * @author Abdul Rehman
 */
public class PreviousFines extends javax.swing.JFrame {

    PreparedStatement ps;
    DefaultTableModel tm;

//    PopupMenu menu = new PopupMenu();
    JMenuItem markAsUnpaid = null;

    String whereClause = "";

    /**
     * Creates new form PreviousFines
     */
    public PreviousFines() {
        initComponents();
        tm = (DefaultTableModel) tbl.getModel();
        try {
            setTableData(getTableData());
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(PreviousFines.class.getName()).log(Level.SEVERE, null, ex);
        }
        btnMarkAsUnPaid.setEnabled(false);
        popUpMenus();
    }

    private ResultSet getTableData() throws SQLException, ClassNotFoundException {
        return getTableData("");
    }

    private ResultSet getTableData(String whereClause) throws SQLException, ClassNotFoundException {
        connection();
        ps = con.prepareStatement("SELECT F.ID, CONCAT(SD.FIRST_NAME, ' ', SD.LAST_NAME) AS `NAME`, CONCAT(B.TITLE, ' ', B.AUTHOR) AS BOOK, F.FINE, \n"
                + "F.PURPOSE, F.`DATE`, F.`STATUS` FROM FINE F\n"
                + "LEFT JOIN STUDENT_DATA SD ON SD.ID = F.STUDENT_ID\n"
                + "LEFT JOIN BOOK B ON B.ID = F.BOOK_ID " + whereClause + " ORDER BY F.ID DESC");
        ResultSet rs = ps.executeQuery();
        return rs;
    }

    private void setTableData(ResultSet rs) throws SQLException {
        tm.setRowCount(0);
        while (rs.next()) {
            Vector v = new Vector();
            v.add(rs.getString("ID"));
            v.add(rs.getString("NAME"));
            v.add(rs.getString("BOOK"));
            v.add(rs.getString("FINE"));
            v.add(rs.getString("PURPOSE"));
            v.add(rs.getString("DATE"));
            v.add(rs.getString("STATUS"));
            tm.addRow(v);
        }
    }

    private void setTableData() throws SQLException, ClassNotFoundException {
        setTableData(getTableData());
    }

    private void popUpMenus() {
//        menu.addOption("Pay", new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent e) {
//                payFine();
//            }
//        });
//        markAsUnpaid = menu.addOption("Mark As Unpaid", new ActionListener() {
//            @Override
//            public void actionPerformed(ActionEvent evt) {
//                String fineId = tm.getValueAt(tbl.getSelectedRow(), NORMAL).toString();
//                try {
//                    connection();
//                    ps = con.prepareStatement("UPDATE FINE SET `STATUS` = 'Unpaid' WHERE id = '" + fineId + "'");
//                    ps.execute();
//                    setTableData(getTableData());
//                } catch (SQLException | ClassNotFoundException ex) {
//                    Logger.getLogger(PreviousFines.class.getName()).log(Level.SEVERE, null, ex);
//                }
//            }
//        });
//        menu.show(tbl);
    }

    private void enableDisableMarkAsUnPiadButton() {
        //Table Column 9 Contain the status of fine.
        try{
        if (tm.getValueAt(tbl.getSelectedRow(), 9).equals("Paid")) {
            btnMarkAsUnPaid.setEnabled(true);
            markAsUnpaid.setEnabled(true);
        } else {
            btnMarkAsUnPaid.setEnabled(false);
            markAsUnpaid.setEnabled(false);
        }
        }catch(ArrayIndexOutOfBoundsException e){/**System.out.println(e);*/}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tfSearch = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        cbShow = new javax.swing.JComboBox<>();
        btnPay = new javax.swing.JButton();
        btnMarkAsUnPaid = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Fine");
        setResizable(false);

        tbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fine ID", "Name", "Book", "Fine", "Purpose", "Date", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbl.getTableHeader().setReorderingAllowed(false);
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        tbl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 51, 0));
        jLabel7.setText("Fine Information");

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel12.setText("Search:");

        tfSearch.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel1.setText("Show:");

        cbShow.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cbShow.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ALL", "Paid", "UnPaid" }));
        cbShow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbShowActionPerformed(evt);
            }
        });

        btnPay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnPay.setText("Pay");
        btnPay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPayActionPerformed(evt);
            }
        });

        btnMarkAsUnPaid.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnMarkAsUnPaid.setText("Mark as UnPaid");
        btnMarkAsUnPaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMarkAsUnPaidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbShow, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnPay))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnDelete)
                                .addGap(18, 18, 18)
                                .addComponent(btnMarkAsUnPaid))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1246, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(514, 514, 514)
                .addComponent(jLabel7)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel12)
                        .addComponent(jLabel1)
                        .addComponent(cbShow, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnPay))
                .addGap(13, 13, 13)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnMarkAsUnPaid)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void search() {
        String search = tfSearch.getText();
        try {
            if (search.equals("")) {
                setTableData(getTableData(whereClause));
            } else {
                String whereCondition = "";
                if (cbShow.getSelectedIndex() != 0) {
                    whereCondition = " AND " + whereClause.substring(6);
                }

                connection();
                ps = con.prepareStatement("SELECT F.ID, CONCAT(SD.FIRST_NAME, ' ', SD.LAST_NAME) AS `NAME`, CONCAT(B.TITLE, ' ', B.AUTHOR) AS BOOK, F.FINE, \n"
                        + "F.PURPOSE, F.`DATE`, F.`STATUS` FROM FINE F\n"
                        + "LEFT JOIN STUDENT_DATA SD ON SD.ID = F.STUDENT_ID\n"
                        + "LEFT JOIN BOOK B ON B.ID = F.BOOK_ID\n"
                        + "WHERE (F.ID REGEXP '" + search + "' OR\n"
                        + "STUDENT_ID REGEXP '" + search + "' OR\n"
                        + "`FIRST_NAME` REGEXP '" + search + "' OR\n"
                        + "`LAST_NAME` REGEXP '" + search + "' OR\n"
                        + "BOOK_ID REGEXP '" + search + "' OR\n"
                        + "TITLE REGEXP '" + search + "' OR\n"
                        + "AUTHOR REGEXP '" + search + "' OR\n"
                        + "F.FINE REGEXP '" + search + "' OR\n"
                        + "`PURPOSE` REGEXP '" + search + "' OR\n"
                        + "F.`DATE` REGEXP '" + search + "' OR\n"
                        + "F.`STATUS` REGEXP '" + search + "')"
                        + whereCondition + "order by f.id desc");
                ResultSet rs = ps.executeQuery();
                setTableData(rs);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(PreviousFines.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        search();
    }//GEN-LAST:event_tfSearchKeyReleased

    private void cbShowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbShowActionPerformed
        try {
            if (cbShow.getSelectedIndex() == 0) {
                setTableData(getTableData(""));
            } else {
                whereClause = "where f.status = '" + cbShow.getSelectedItem() + "'";
                setTableData(getTableData(whereClause));
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(PreviousFines.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cbShowActionPerformed

    public boolean payFine(){
        FineFunctions f = new FineFunctions();

        if (JOptionPane.showConfirmDialog(this, "Has Selected Members Paid the Fine.", "Paying Fine",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
            for (int i : tbl.getSelectedRows()) {
                String fineId = (String) tbl.getValueAt(i, NORMAL);

                try {
                    {//Checking if fine is paid...
                        if (f.isFinePaid(fineId)) {
                            throw new NewException("This Fine is already paid.");
                        }
                    }

                    f.payFine(fineId);
                } catch (SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(CurrentFines.class.getName()).log(Level.SEVERE, null, ex);
                } catch (NewException e) {
//                    JOptionPane.showMessageDialog(this, e.getMessage(), "Paying Fine", JOptionPane.ERROR_MESSAGE);
//                    return false;
                }
            }
            search();
            return true;
        }
        return false;
    }
    private void btnPayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPayActionPerformed
        payFine();
    }//GEN-LAST:event_btnPayActionPerformed

    private void btnMarkAsUnPaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMarkAsUnPaidActionPerformed
        String fineId = tm.getValueAt(tbl.getSelectedRow(), NORMAL).toString();
        try {
            connection();
            ps = con.prepareStatement("UPDATE FINE SET `STATUS` = 'Unpaid' WHERE id = '" + fineId + "'");
            ps.execute();
            setTableData(getTableData());
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(PreviousFines.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnMarkAsUnPaidActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Do you want to Delete Selected Records.",
                "Delete Records", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.YES_OPTION) {
            boolean isMsgShown = false;
            int[] selectedRows = tbl.getSelectedRows();
            StringBuilder sb = new StringBuilder("(");
            try {
                connection();
                for (int i : selectedRows) {
                    if (tm.getValueAt(i, 9).equals("Unpaid")) {
                        if (!isMsgShown) {
                            JOptionPane.showMessageDialog(this, "Unpaid Fines Can't be Deleted.", "Delete", JOptionPane.INFORMATION_MESSAGE);
                            isMsgShown = true;
                        }
                        continue;
                    }
                    sb.append(tbl.getValueAt(i, NORMAL)).append(",");
                }
                sb.deleteCharAt(sb.length() - 1);
                sb.append(")");

                ps = con.prepareStatement("DELETE FROM FINE WHERE ID IN " + sb);
                if (!ps.execute()) {
                    setTableData();
                }
            } catch (SQLException | ClassNotFoundException ex) {
                Logger.getLogger(PreviousFines.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        enableDisableMarkAsUnPiadButton();
        
        if (LMS.All_Information.doubleClick.detectDoubleClick()){
            new Fine_History_Detail_Shower((String)tbl.getValueAt(tbl.getSelectedRow(), NORMAL)).setVisible(true);
        }
    }//GEN-LAST:event_tblMouseClicked

    private void tblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblKeyReleased
        enableDisableMarkAsUnPiadButton();
    }//GEN-LAST:event_tblKeyReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreviousFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreviousFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreviousFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreviousFines.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreviousFines().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnMarkAsUnPaid;
    private javax.swing.JButton btnPay;
    private javax.swing.JComboBox<String> cbShow;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables
}
