/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LMS;

import static LMS.MainForm.con;
import static LMS.MainForm.connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import javax.swing.JOptionPane;

/**
 *
 * @author Abdul Rehman Lashari
 */
public class Statistics extends javax.swing.JFrame {
    DefaultTableModel tm;
    PreparedStatement ps;

    /**
     * Creates new form Statistics
     */
    public Statistics() {
        initComponents();
        setTableData();
    }
    
    private void setReturnedBookData() {
        try {
            connection();
            tm.setRowCount(0);
            ps = con.prepareStatement("SELECT ib.student_id, sd.first_name, sd.last_name, sd.group, ib.book_id, b.title, b.author, ib.ISSUE_DATE, ib.RETURN_DATE FROM LMS.ISSUE_BOOK ib\n" +
                                        "JOIN student_data sd ON ib.student_id = sd.id\n" +
                                        "JOIN lms.book b ON ib.book_id = b.id\n" +
                                        "WHERE RETURN_DATE < CURRENT_DATE()");
            ResultSet rs = ps.executeQuery();
            while (rs.next()){
                Vector v = new Vector();
                v.add(changeNullString(rs.getString("student_id")));
                v.add(changeNullString(rs.getString("first_name") + " " + rs.getString("last_name")));
                v.add(changeNullString(rs.getString("group")));
                v.add(changeNullString(rs.getString("book_id")));
                v.add(changeNullString(rs.getString("title")));
                v.add(changeNullString(rs.getString("author")));
                v.add(changeNullString(rs.getString("issue_date")));
                v.add(changeNullString(rs.getString("return_date")));
                tm.addRow(v);
            }
            
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Statistics.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setTableData() {
        tm = (DefaultTableModel) tblReturnBookList.getModel();
        tm.setRowCount(0);
        try {
            connection();
            ps = con.prepareStatement("SELECT ib.student_id, sd.first_name, sd.last_Name, sd.group, ib.book_id, b.title, b.author, ib.ISSUE_DATE, ib.RETURN_DATE FROM lms.issue_book ib\n"
                    + "JOIN student_data sd ON sd.id = ib.student_id\n"
                    + "JOIN LMS.BOOK b ON b.id = ib.book_id");
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                Vector v = new Vector();
                v.add(changeNullString(rs.getString("student_id")));
                v.add(changeNullString(rs.getString("first_name") + " " + rs.getString("last_name")));
                v.add(changeNullString(rs.getString("group")));
                v.add(changeNullString(rs.getString("book_id")));
                v.add(changeNullString(rs.getString("title")));
                v.add(changeNullString(rs.getString("author")));
                v.add(changeNullString(rs.getString("issue_date")));
                v.add(changeNullString(rs.getString("return_date")));
                tm.addRow(v);
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(ReturnBooks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private String changeNullString(String nullLine) {
        String r; 
        try{r= (!nullLine.equals("null")) ? nullLine : "";}
        catch(NullPointerException e){r = nullLine;}
        return r;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblReturnBookList = new javax.swing.JTable();
        btnReturned = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        cb = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Statitics");

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Issued Books", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24), new java.awt.Color(255, 0, 0))); // NOI18N

        tblReturnBookList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblReturnBookList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member ID", "Name", "Category", "Acc No", "Title", "Author", "Date Issue", "Date Return"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblReturnBookList.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblReturnBookList);

        btnReturned.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btnReturned.setText("Returned");
        btnReturned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnedActionPerformed(evt);
            }
        });

        txtSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearch.setText("Search");
        txtSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtSearchFocusLost(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
        });

        cb.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All Books", "Out of Date Books" }));
        cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 997, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnReturned)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49)
                .addComponent(cb, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnReturned)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnedActionPerformed
        tm = (DefaultTableModel) tblReturnBookList.getModel();
        int row = tblReturnBookList.getSelectedRow();
        String bookId = tm.getValueAt(row, 3).toString();
        ReturnBooks rb = new ReturnBooks();
        if (rb.returnBook(tm.getValueAt(row, NORMAL).toString(), bookId))
        {
            JOptionPane.showMessageDialog(this, "\""+tm.getValueAt(row, 4)+"\" Book Returned", "Return Book", JOptionPane.INFORMATION_MESSAGE);
            new All_Information().showReservationMessage(bookId, tblReturnBookList.getValueAt(row, 4).toString());
            if (cb.getSelectedItem().toString().equals("All Books"))
                searchAll();
            else if (cb.getSelectedItem().toString().equals("Out of Date Books"))
                searchOutOfDate();
            
        }else
            JOptionPane.showMessageDialog(this, "Couldn't Return the Book\n", "Return Book", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnReturnedActionPerformed

    private void searchOutOfDate(){
        try {
            String search = txtSearch.getText();
            connection();
            tm.setRowCount(0);
            if (search.equals("") || search.equals("Search"))
                setReturnedBookData();
            else{
                ps = con.prepareStatement("SELECT ib.student_id, sd.first_name, sd.last_name, sd.group, ib.book_id, b.title, b.author, ib.ISSUE_DATE, ib.RETURN_DATE FROM LMS.ISSUE_BOOK ib\n" +
                                        "JOIN student_data sd ON ib.student_id = sd.id\n" +
                                        "JOIN lms.book b ON ib.book_id = b.id\n" +
                                        "WHERE RETURN_DATE < CURRENT_DATE() AND\n" +
                                        "(ib.student_id REGEXP '"+search+"' OR\n" +
                                        "sd.first_name REGEXP '"+search+"' OR\n" +
                                        "sd.last_name REGEXP '"+search+"' OR\n" +
                                        "sd.group REGEXP '"+search+"' OR\n" +
                                        "ib.book_id REGEXP '"+search+"' OR\n" +
                                        "b.title REGEXP '"+search+"' OR\n" +
                                        "b.author REGEXP '"+search+"' OR\n" +
                                        "ib.issue_date REGEXP '"+search+"' OR\n" +
                                        "ib.return_date REGEXP '"+search+"')");
                ResultSet rs = ps.executeQuery();
                while (rs.next()){
                    Vector v = new Vector();
                    v.add(changeNullString(rs.getString("student_id")));
                    v.add(changeNullString(rs.getString("first_name") + " " + rs.getString("last_name")));
                    v.add(changeNullString(rs.getString("group")));
                    v.add(changeNullString(rs.getString("book_id")));
                    v.add(changeNullString(rs.getString("title")));
                    v.add(changeNullString(rs.getString("author")));
                    v.add(changeNullString(rs.getString("issue_date")));
                    v.add(changeNullString(rs.getString("return_date")));
                    tm.addRow(v);
                }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(ReturnBooks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void searchAll(){
        try {
            connection();
            tm.setRowCount(0);
            if (txtSearch.getText().equals("") || txtSearch.getText().equals("Search")) {
                setTableData();
            } else {
                ps = con.prepareStatement("SELECT ib.student_id, sd.first_name, sd.last_name, sd.group, ib.book_id, b.title, b.author, ib.issue_date, ib.return_date FROM LMS.ISSUE_BOOK ib\n"
                        + "JOIN student_data sd ON ib.student_id = sd.id\n"
                        + "JOIN lms.book b ON ib.book_id = b.id\n"
                        + "WHERE ib.student_id REGEXP '" + txtSearch.getText() + "' OR\n"
                        + "sd.first_name REGEXP '" + txtSearch.getText() + "' OR\n"
                        + "sd.last_name REGEXP '" + txtSearch.getText() + "' OR\n"
                        + "sd.group REGEXP '" + txtSearch.getText() + "' OR\n"
                        + "ib.book_id REGEXP '" + txtSearch.getText() + "' OR\n"
                        + "b.title REGEXP '" + txtSearch.getText() + "' OR\n"
                        + "b.author REGEXP '" + txtSearch.getText() + "' OR\n"
                        + "ib.issue_date REGEXP '" + txtSearch.getText() + "' OR\n"
                        + "ib.return_date REGEXP '" + txtSearch.getText() + "'");
                ResultSet rs = ps.executeQuery();
                while (rs.next()) {
                    Vector v = new Vector();
                    v.add(changeNullString(rs.getString("student_id")));
                    v.add(changeNullString(rs.getString("first_name") + " " + rs.getString("last_name")));
                    v.add(changeNullString(rs.getString("group")));
                    v.add(changeNullString(rs.getString("book_id")));
                    v.add(changeNullString(rs.getString("title")));
                    v.add(changeNullString(rs.getString("author")));
                    v.add(changeNullString(rs.getString("issue_date")));
                    v.add(changeNullString(rs.getString("return_date")));
                    tm.addRow(v);
                }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(ReturnBooks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        if (cb.getSelectedItem().toString().equals("All Books"))
            searchAll();
        else if (cb.getSelectedItem().toString().equals("Out of Date Books"))
            searchOutOfDate();
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusGained
        txtSearch.setText(MainForm.focusGainedLogic(txtSearch.getText(), "Search"));
    }//GEN-LAST:event_txtSearchFocusGained

    private void txtSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtSearchFocusLost
        txtSearch.setText(MainForm.focusLostLogic(txtSearch.getText(), "Search"));
    }//GEN-LAST:event_txtSearchFocusLost

    private void cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbActionPerformed
        if (cb.getSelectedItem().toString().equals("All Books"))
            setTableData();
        else if (cb.getSelectedItem().toString().equals("Out of Date Books"))
            setReturnedBookData();
    }//GEN-LAST:event_cbActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Statistics.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Statistics().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReturned;
    private javax.swing.JComboBox<String> cb;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblReturnBookList;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
