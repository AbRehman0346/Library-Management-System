/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Settings;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import Abdul_Rehmancom.company.EncryptPassword;
import LMS.MainForm;
import LMS.NewException;
/**
 *
 * @author Abdul Rehman Lashari
 */
public class Set_Password extends javax.swing.JFrame {
    PreparedStatement ps;
    JComboBox comboBoxQuestion;
    JTextField txtAnswer, txtEmail;
//    JPasswordField tfEmailPassword;
    /**
     * Creates new form Set_Password
     */
    public Set_Password() {
        initComponents();
        {//Setting Echo Characters for Password Fields....
            txtPassword.setEchoChar('*');
            txtConformPassword.setEchoChar('*');
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new javax.swing.JPanel();
        lblHeading = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        checkBoxRecoveryEmail = new javax.swing.JCheckBox();
        checkBoxRecoveryQuestion = new javax.swing.JCheckBox();
        btnSet = new javax.swing.JButton();
        checkBoxShowPassword = new javax.swing.JCheckBox();
        txtPassword = new javax.swing.JPasswordField();
        txtConformPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Set Password");

        panel.setBackground(new java.awt.Color(204, 204, 204));
        panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblHeading.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lblHeading.setForeground(new java.awt.Color(255, 51, 51));
        lblHeading.setText("Set Password");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Enter Password:");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Confrom Password:");

        checkBoxRecoveryEmail.setBackground(new java.awt.Color(204, 204, 204));
        checkBoxRecoveryEmail.setText("Set Recovery Email");
        checkBoxRecoveryEmail.setToolTipText("This will use your Email to Recover Password (Optional)");
        checkBoxRecoveryEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRecoveryEmailActionPerformed(evt);
            }
        });

        checkBoxRecoveryQuestion.setBackground(new java.awt.Color(204, 204, 204));
        checkBoxRecoveryQuestion.setText("Set Recovery Question");
        checkBoxRecoveryQuestion.setToolTipText("You can set a Recovery Question to Recover Password (Optional)");
        checkBoxRecoveryQuestion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxRecoveryQuestionActionPerformed(evt);
            }
        });

        btnSet.setText("SET");
        btnSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetActionPerformed(evt);
            }
        });

        checkBoxShowPassword.setBackground(new java.awt.Color(204, 204, 204));
        checkBoxShowPassword.setText("Show Passwords");
        checkBoxShowPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxShowPasswordActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkBoxShowPassword, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(checkBoxRecoveryEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtPassword)
                    .addComponent(checkBoxRecoveryQuestion, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtConformPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 182, Short.MAX_VALUE))
                .addGap(94, 94, 94))
            .addGroup(panelLayout.createSequentialGroup()
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addComponent(lblHeading))
                    .addGroup(panelLayout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(btnSet, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblHeading)
                .addGap(40, 40, 40)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtConformPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 9, Short.MAX_VALUE)
                .addComponent(checkBoxShowPassword)
                .addGap(10, 10, 10)
                .addComponent(checkBoxRecoveryEmail)
                .addGap(10, 10, 10)
                .addComponent(checkBoxRecoveryQuestion)
                .addGap(18, 18, 18)
                .addComponent(btnSet)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxRecoveryEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRecoveryEmailActionPerformed
        if (checkBoxRecoveryEmail.isSelected()){
            txtEmail = new JTextField();
//            tfEmailPassword = new JPasswordField();
            txtEmail.setBounds(20, 300, 300, 30);
            {//Setting Focus Listeners....
                txtEmail.setText("Email");
                txtEmail.addFocusListener(new FocusListener(){
                    @Override
                    public void focusGained(FocusEvent e){
                        txtEmail.setText(MainForm.focusGainedLogic(txtEmail.getText(), "Email"));
                    }
                    @Override
                    public void focusLost(FocusEvent e){
                        txtEmail.setText(MainForm.focusLostLogic(txtEmail.getText(), "Email"));
                    }
                });
                
                /***tfEmailPassword.setText("Password");
                tfEmailPassword.setEchoChar((char)0);
                tfEmailPassword.addFocusListener(new FocusListener(){
                    @Override
                    public void focusGained(FocusEvent e){
                        tfEmailPassword.setText(MainForm.focusGainedLogic(String.valueOf(tfEmailPassword.getPassword()), "Password"));

                        if (!checkBoxShowPassword.isSelected())
                            tfEmailPassword.setEchoChar('*');
                    }
                    @Override
                    public void focusLost(FocusEvent e){
                        tfEmailPassword.setText(MainForm.focusLostLogic(String.valueOf(tfEmailPassword.getPassword()), "Password"));
                    }
                });***/
            }
            this.setSize(this.getWidth(), 440);
            btnSet.setLocation(btnSet.getX(), 360);
//            tfEmailPassword.setBounds(20, 320, 300, 30);

            panel.setLayout(null);
//            panel.add(tfEmailPassword);
            panel.add(txtEmail);
            checkBoxRecoveryQuestion.setEnabled(false);
        }
        else {
            this.setSize(this.getWidth(), 370);
            btnSet.setLocation(btnSet.getX(), 290);
            panel.remove(panel.getComponentAt(txtEmail.getX(), txtEmail.getY()));
//            panel.remove(panel.getComponentAt(tfEmailPassword.getX(), tfEmailPassword.getY()));
            checkBoxRecoveryQuestion.setEnabled(true);
        }
    }//GEN-LAST:event_checkBoxRecoveryEmailActionPerformed

    public boolean Save(String sqlCode, String password, String email, String question, String answer, String status) throws SQLException{
        ps = MainForm.con.prepareStatement(sqlCode);
        ps.setString(1, password);
        ps.setString(2, email);
        ps.setString(3, question);
        ps.setString(4, answer);
        ps.setString(5, status);
        return !ps.execute();
    }
    private void btnSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetActionPerformed
        try {
            short one = 1, two = 2;
            String sqlInsertCode = "INSERT INTO `password`\n" +
                                            "SET `password` = ?,\n" +
                                            "`email` = ?,\n" +
                                            "`question` = ?,\n" +
                                            "`answer` = ?,\n" +
                                            "`status` = ?;";
            String sqlUpdateCode = "UPDATE `password`\n" +
                                            "SET `password` = ?,\n" +
                                            "`email` = ?,\n" +
                                            "`question` = ?,\n" +
                                            "`answer` = ?,\n" +
                                            "`status` = ?\n" +
                                            "WHERE ID = ";
            EncryptPassword ep = new EncryptPassword();
            String password = ep.Encrypt(String.valueOf(txtPassword.getPassword()));
            if (!password.equals(ep.Encrypt(String.valueOf(txtConformPassword.getPassword())))){throw new NewException("Passwords doesn't match");}
            String email = null, question=null, answer=null;
            if (checkBoxRecoveryEmail.isSelected()){
                email = ep.Encrypt(txtEmail.getText());
//                answer = ep.Encrypt(String.valueOf(tfEmailPassword.getPassword()));
            }
                
            else if (checkBoxRecoveryQuestion.isSelected()){
                question = ep.Encrypt(comboBoxQuestion.getSelectedItem().toString()); 
                answer = ep.Encrypt(txtAnswer.getText());
            }
            MainForm.connection();
            ps = MainForm.con.prepareStatement("SELECT * FROM password WHERE id = 1");
            ResultSet rs = ps.executeQuery();
//            This will check the password table if data exists there then it inserts otherwise update data...(New Password)
            boolean checkIfPasswordSet = false;
            if (!rs.next()){
                Save(sqlInsertCode, password, email, question, answer, "Current");
            }else{
                checkIfPasswordSet = rs.getString("status").equals("Current");
                Save(sqlUpdateCode+one, password, email, question, answer, "Current");
            }
//            end....

//            This will check the password table if data exists there then it inserts otherwise update data...(Last Password)
            ps = MainForm.con.prepareStatement("SELECT * FROM password WHERE id = 2");
            ResultSet rs2 = ps.executeQuery();
            if (!rs2.next()){
                try{Save(sqlInsertCode, rs.getString("password"), rs.getString("email"), rs.getString("question"), rs.getString("answer"), "OLD");}
                catch (SQLException e){}
            }else{
                Save((sqlUpdateCode+two), rs.getString("password"), rs.getString("email"), rs.getString("question"), rs.getString("answer"), "OLD");
            }
//            End.....
            if (checkIfPasswordSet){
                JOptionPane.showMessageDialog(rootPane, "Sucessfully! Password Changed", "Password Change", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }
            else{
                JOptionPane.showMessageDialog(rootPane, "Sucessfully! Password Set", "Password Set", JOptionPane.INFORMATION_MESSAGE);
                this.dispose();
            }
            
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(Set_Password.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (NewException e){
            JOptionPane.showMessageDialog(null, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSetActionPerformed

    private void checkBoxRecoveryQuestionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxRecoveryQuestionActionPerformed
        if (checkBoxRecoveryQuestion.isSelected()) {
            comboBoxQuestion = new JComboBox();
            txtAnswer = new JTextField();
            {//Setting txtAnswer's focus Listeners...
                txtAnswer.setText("Answer");
                txtAnswer.addFocusListener(new FocusListener(){
                    @Override
                    public void focusGained(FocusEvent e){
                        txtAnswer.setText(MainForm.focusGainedLogic(txtAnswer.getText(), "Answer"));
                    }

                    @Override
                    public void focusLost(FocusEvent e) {
                        txtAnswer.setText(MainForm.focusLostLogic(txtAnswer.getText(), "Answer"));
                    }
                });
            }
            this.setSize(this.getWidth(), 500);
            btnSet.setLocation(btnSet.getX(), 400);
            comboBoxQuestion.setBounds(20, 300, 300, 30);
            txtAnswer.setBounds(20, 350, 300, 30);
            { //Setting the items of the comboBox....
                String[] questions = {"What is your first pet's name", "What's the name of the city where you were born?",
                                   "What was your childhood nickname?", "What's name of the first school you attended?", "Customize"};
                for (String item : questions){
                    comboBoxQuestion.addItem(item);
                }
            }
            panel.add(comboBoxQuestion);
            panel.add(txtAnswer);
            panel.setLayout(null); 
            checkBoxRecoveryEmail.setEnabled(false);

        } else {
            this.setSize(this.getWidth(), 370);//355
            btnSet.setLocation(135, 290);
            panel.remove(panel.getComponentAt(comboBoxQuestion.getX(), comboBoxQuestion.getY()));
            panel.remove(panel.getComponentAt(txtAnswer.getX(), txtAnswer.getY()));
            checkBoxRecoveryEmail.setEnabled(true);
        }
        
//        Setting ActionPerformed for comboBoxQuestion.
        comboBoxQuestion.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                if (comboBoxQuestion.getSelectedItem().toString().equals("Customize")){
                    comboBoxQuestion.setEditable(true);
                    comboBoxQuestion.setSelectedItem(null);
                }
                else comboBoxQuestion.setEditable(false);
            }
        });
    
    }//GEN-LAST:event_checkBoxRecoveryQuestionActionPerformed

    private void checkBoxShowPasswordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxShowPasswordActionPerformed
        if (checkBoxShowPassword.isSelected()){
            txtPassword.setEchoChar((char)0);
            txtConformPassword.setEchoChar((char)0);
//            tfEmailPassword.setEchoChar((char)0);
        }
        else{
            txtPassword.setEchoChar('*');
            txtConformPassword.setEchoChar('*');
//            tfEmailPassword.setEchoChar('*');
        }
            
    }//GEN-LAST:event_checkBoxShowPasswordActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Set_Password.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Set_Password.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Set_Password.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Set_Password.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Set_Password().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnSet;
    private javax.swing.JCheckBox checkBoxRecoveryEmail;
    private javax.swing.JCheckBox checkBoxRecoveryQuestion;
    private javax.swing.JCheckBox checkBoxShowPassword;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    public javax.swing.JLabel lblHeading;
    private javax.swing.JPanel panel;
    private javax.swing.JPasswordField txtConformPassword;
    private javax.swing.JPasswordField txtPassword;
    // End of variables declaration//GEN-END:variables
}