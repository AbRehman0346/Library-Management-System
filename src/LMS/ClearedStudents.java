/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package LMS;
import static LMS.MainForm.con;
import static LMS.MainForm.connection;
import static LMS.MainForm.focusGainedLogic;
import static LMS.MainForm.focusLostLogic;
import java.awt.FileDialog;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.JLabel;

/**
 *
 * @author Abdul Rehman
 */
public class ClearedStudents extends javax.swing.JFrame {
    DefaultTableModel tm;
    PreparedStatement ps;
    String whereClause = "";
    /**
     * Creates new form ClearedStudents
     */
    public ClearedStudents() {
        initComponents();
        tm = (DefaultTableModel) tbl.getModel();
        btnRefresh.setIcon(MainForm.setImage(getClass().getResource("/IconsUsed/RefreshIcon.jpg"), btnRefresh.getWidth(), btnRefresh.getHeight()));
        settblStudentsStudentData();
        {//Centerting the Columns of the table..
            DefaultTableCellRenderer tr = new DefaultTableCellRenderer();
            tr.setHorizontalAlignment(JLabel.CENTER);
            
            tbl.getColumnModel().getColumn(0).setCellRenderer(tr);
            tbl.getColumnModel().getColumn(4).setCellRenderer(tr);
            tbl.getColumnModel().getColumn(5).setCellRenderer(tr);
            tbl.getColumnModel().getColumn(7).setCellRenderer(tr);
            
            //Setting cb Data for year Selection.
            setCBData();
        }
    }

    private void setCBData(){
        cb.addItem("All");
        try {
            connection();
            ps = con.prepareStatement("SELECT DISTINCT(YEAR(`CLEARED_DATE`)) AS `year` FROM STUDENT_DATA ORDER BY `YEAR` DESC");
            ResultSet rs = ps.executeQuery();
            while (rs.next()){
                cb.addItem(rs.getString("year"));
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(ClearedStudents.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlStudent = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        txtStudentsSearch = new javax.swing.JTextField();
        btnStudentsDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        lblStudentsPicture = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        ta = new javax.swing.JTextArea();
        lblStudentCount = new javax.swing.JLabel();
        btnStudentRestore = new javax.swing.JButton();
        cb = new javax.swing.JComboBox<>();
        btnStudentsExport = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Cleared Members");

        pnlStudent.setBackground(new java.awt.Color(204, 204, 204));

        tbl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tbl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "First Name", "Last Name", "Father's Name", "Phone", "Email", "Gender", "Address", "Category", "Clearance Date"
            }
        ));
        tbl.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tbl.getTableHeader().setReorderingAllowed(false);
        tbl.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMouseClicked(evt);
            }
        });
        tbl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tbl);

        txtStudentsSearch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtStudentsSearch.setText("Search");
        txtStudentsSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtStudentsSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtStudentsSearchFocusLost(evt);
            }
        });
        txtStudentsSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtStudentsSearchKeyReleased(evt);
            }
        });

        btnStudentsDelete.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnStudentsDelete.setText("Delete");
        btnStudentsDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentsDeleteActionPerformed(evt);
            }
        });

        btnRefresh.setBackground(new java.awt.Color(204, 204, 204));
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        lblStudentsPicture.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStudentsPicture.setText("                Picture");
        lblStudentsPicture.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        ta.setEditable(false);
        ta.setBackground(new java.awt.Color(204, 204, 204));
        ta.setColumns(20);
        ta.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ta.setLineWrap(true);
        ta.setRows(5);
        ta.setWrapStyleWord(true);
        jScrollPane4.setViewportView(ta);

        lblStudentCount.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lblStudentCount.setText("Students: ");

        btnStudentRestore.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnStudentRestore.setText("Restore");
        btnStudentRestore.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentRestoreActionPerformed(evt);
            }
        });

        cb.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbActionPerformed(evt);
            }
        });

        btnStudentsExport.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btnStudentsExport.setText("Export");
        btnStudentsExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStudentsExportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlStudentLayout = new javax.swing.GroupLayout(pnlStudent);
        pnlStudent.setLayout(pnlStudentLayout);
        pnlStudentLayout.setHorizontalGroup(
            pnlStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStudentLayout.createSequentialGroup()
                .addGroup(pnlStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlStudentLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlStudentLayout.createSequentialGroup()
                                .addComponent(btnStudentsDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnStudentRestore)
                                .addGap(18, 18, 18)
                                .addComponent(btnStudentsExport)
                                .addGap(99, 99, 99)
                                .addComponent(lblStudentCount, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnlStudentLayout.createSequentialGroup()
                                .addComponent(txtStudentsSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(524, 524, Short.MAX_VALUE)
                        .addComponent(cb, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(lblStudentsPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        pnlStudentLayout.setVerticalGroup(
            pnlStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStudentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtStudentsSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(pnlStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 577, Short.MAX_VALUE)
                    .addGroup(pnlStudentLayout.createSequentialGroup()
                        .addComponent(lblStudentsPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4)))
                .addGap(18, 18, 18)
                .addGroup(pnlStudentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnStudentsDelete)
                    .addComponent(lblStudentCount)
                    .addComponent(btnStudentRestore)
                    .addComponent(btnStudentsExport))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlStudent, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void tblMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMouseClicked
        setStudentPicture();
    }//GEN-LAST:event_tblMouseClicked

    private void tblKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblKeyReleased
        setStudentPicture();
    }//GEN-LAST:event_tblKeyReleased

    private void txtStudentsSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStudentsSearchFocusGained
        txtStudentsSearch.setText(focusGainedLogic(txtStudentsSearch.getText(), "Search"));
    }//GEN-LAST:event_txtStudentsSearchFocusGained

    private void txtStudentsSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtStudentsSearchFocusLost
        txtStudentsSearch.setText(focusLostLogic(txtStudentsSearch.getText(), "Search"));
    }//GEN-LAST:event_txtStudentsSearchFocusLost

    private void txtStudentsSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtStudentsSearchKeyReleased
        txtStudentsSearchLogic();
    }//GEN-LAST:event_txtStudentsSearchKeyReleased

    private void btnStudentsDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentsDeleteActionPerformed
        boolean isDeleted = false;
        
        if (!tbl.getSelectionModel().isSelectionEmpty()){
            if (JOptionPane.showConfirmDialog(this, "Do You Want to Delete Selected Student(s)", "Delete Student(s)",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION){

                for (int selectedRow : tbl.getSelectedRows()){
                    if (deleteStudent(tm.getValueAt(selectedRow, NORMAL).toString())){
                        isDeleted = true;
                    }
                    else
                    JOptionPane.showMessageDialog(this, "Unable to Delete Student", "Delete Student", JOptionPane.ERROR_MESSAGE);
                }
            }
            if (isDeleted){
                JOptionPane.showMessageDialog(this, "Selected Student(s) has been Deleted.", "Delete Student", JOptionPane.INFORMATION_MESSAGE);
                lblStudentsPicture.setIcon(null);
                ta.setText(null);
                txtStudentsSearchLogic();
            }
        }else
        JOptionPane.showMessageDialog(this, "No Any Student is Selected to Delete.", "Delete Student", JOptionPane.ERROR_MESSAGE);
        
    }//GEN-LAST:event_btnStudentsDeleteActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        txtStudentsSearch.setText("Search");
        settblStudentsStudentData();
        lblStudentsPicture.setIcon(null);
        lblStudentsPicture.setText("                Picture");
        ta.setText(null);
        cb.setSelectedIndex(0);
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnStudentRestoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentRestoreActionPerformed
        try{
            if (tbl.getSelectionModel().isSelectionEmpty())
                throw new NewException("First Select Any Student From Table To Restore.");
            connection();
            if (JOptionPane.showConfirmDialog(this, "Do You Want to Restore Selected Student(s)?", "Restore", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION){
                for (int selectedRow : tbl.getSelectedRows()){
                    //Inserting student into cleared table so taht it can be clared...
                    ps = con.prepareStatement("UPDATE STUDENT_DATA\n" +
                        "SET `STATUS` = 'Active'\n" +
                        "WHERE ID = '"+tm.getValueAt(selectedRow, NORMAL)+"'");
                    ps.execute();
                }
                
                JOptionPane.showMessageDialog(this, "Selected Students Has Been Restored.", "Restored", JOptionPane.INFORMATION_MESSAGE);
                txtStudentsSearchLogic();
                
            }
        }catch(NewException e){JOptionPane.showMessageDialog(this, e.getMessage(), "Selection Error", JOptionPane.ERROR_MESSAGE);}
        catch (SQLException | ClassNotFoundException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            //Logger.getLogger(All_Information.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnStudentRestoreActionPerformed

    private void cbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbActionPerformed
        txtStudentsSearchLogic();
    }//GEN-LAST:event_cbActionPerformed

    private void btnStudentsExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStudentsExportActionPerformed
        try {
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
            FileDialog file = new FileDialog(this, "Choose Path", FileDialog.SAVE);
            file.setFile("Cleared Students");
            file.setVisible(true);
            String location = file.getDirectory()+file.getFile() +" ("+ cb.getSelectedItem() +" Members) " + df.format(new Date()) + ".xls";
            if (location.substring(0, 4).equals("null"))
                throw new NewException("");
            File f = new File(location);
            if (new All_Information().exportTable(tbl, f)){
                JOptionPane.showMessageDialog(this, "Sucessfully Created Your File.");
            }else
            JOptionPane.showConfirmDialog(this, "Sorry! File Could Not Be Created.");
        } catch(NewException e){}
        catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            //Logger.getLogger(BooksReturnedToday.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnStudentsExportActionPerformed

    private void setStudentPicture(){
        try {
            lblStudentsPicture.setText(null);
            connection();
            ps = con.prepareStatement("SELECT image FROM Student_data\n" +
                            "WHERE ID = \""+tm.getValueAt(tbl.getSelectedRow(), 0)+"\"");
            ResultSet rs = ps.executeQuery();
            if (rs.next()){
                byte[] byt = rs.getBytes("image");
                lblStudentsPicture.setIcon(MainForm.setImage(byt, lblStudentsPicture.getWidth(), lblStudentsPicture.getHeight()));
            }
        }catch (NullPointerException e){
            lblStudentsPicture.setIcon(null);
            lblStudentsPicture.setText("      Picture Not Found");
        } 
        catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(All_Information.class.getName()).log(Level.SEVERE, null, ex);
        }
        ta.setText(StudentsShowingDataOfTableToTxtArea().toString());
    }
    
    private StringBuffer StudentsShowingDataOfTableToTxtArea(){
        StringBuffer sb = new StringBuffer();
        int row = tbl.getSelectedRow();
        sb.append("ID: ").append(tm.getValueAt(row, 0)).append("\n\n");
        sb.append("First Name: ").append(tm.getValueAt(row, 1)).append("\n\n");
        sb.append("Last Name: ").append(tm.getValueAt(row, 2)).append("\n\n");
        sb.append("Father's Name: ").append(tm.getValueAt(row, 3)).append("\n\n");
        sb.append("Phone: ").append(tm.getValueAt(row, 4)).append("\n\n");
        sb.append("Email: ").append(tm.getValueAt(row, 5)).append("\n\n");
        sb.append("Sex: ").append(tm.getValueAt(row, 6)).append("\n\n");
        sb.append("Address: ").append(tm.getValueAt(row, 7)).append("\n\n");
        return sb;
    }
    
    public boolean deleteStudent(String id){
        boolean check = false;
        try {
            connection();
            ps = con.prepareStatement("DELETE FROM student_data\n" +
                "WHERE id = '"+id+"'");
            check = !ps.execute();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(All_Information.class.getName()).log(Level.SEVERE, null, ex);
        }
        return check;
    }
    
    public void txtStudentsSearchLogic(){
        try {
            connection();
            String search = txtStudentsSearch.getText();
            {
                lblStudentsPicture.setIcon(null);
                lblStudentsPicture.setText("                Picture");
                ta.setText(null);
            }
            tm.setRowCount(0);
            if (search.equals("Search") || search.equals(""))
                settblStudentsStudentData();
            else {
                whereClause = (cb.getSelectedIndex() != 0) ? " AND YEAR(CLEARED_DATE) = '" + cb.getSelectedItem() + "'" : "";
                ps = con.prepareStatement("SELECT * FROM Student_data\n" +
                        "WHERE (id REGEXP '"+search+"' OR \n" +
                        "first_name REGEXP '"+search+"' OR \n" +
                        "last_Name REGEXP '"+search+"' OR \n" +
                        "father_name REGEXP '"+search+"' OR \n" +
                        "sex REGEXP '"+search+"' OR \n" +
                        "phone REGEXP '"+search+"' OR \n" +
                        "Email REGEXP '"+search+"' OR \n" +
                        "`group` REGEXP '"+search+"' OR \n" +
                        "address REGEXP '"+search+"') " + whereClause + " AND `STATUS` = 'Cleared'");
                ResultSet rs = ps.executeQuery();
                while (rs.next()){
                    Vector v = new Vector();
                    v.add(rs.getString("id"));
                    v.add(rs.getString("first_name"));
                    v.add(rs.getString("last_name"));
                    v.add(rs.getString("father_name"));
                    v.add(rs.getString("phone"));
                    v.add(rs.getString("Email"));
                    v.add(rs.getString("sex"));
                    v.add(rs.getString("address"));
                    v.add(rs.getString("group"));
                    v.add(rs.getString("cleared_date"));
                    tm.addRow(v);
                }
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(All_Information.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void settblStudentsStudentData(){
        try {
            connection();
            tm.setRowCount(0);
            whereClause = (cb.getSelectedIndex() != 0) ? "AND CLEARED_DATE REGEXP '" + cb.getSelectedItem() + "'" : "";
            ps = con.prepareStatement("SELECT * FROM Student_data WHERE `STATUS` = 'Cleared' " + whereClause);
            ResultSet rs = ps.executeQuery();
            while (rs.next()){
                Vector v = new Vector();
                v.add(rs.getString("id"));
                v.add(rs.getString("first_name"));
                v.add(rs.getString("last_name"));
                v.add(rs.getString("father_name"));
                v.add(rs.getString("phone"));
                v.add(rs.getString("Email"));
                v.add(rs.getString("sex"));
                v.add(rs.getString("address"));
                v.add(rs.getString("group"));
                v.add(rs.getString("cleared_date"));
                tm.addRow(v);
            }
            studentCountLabel();
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(All_Information.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void studentCountLabel(){
        try {
            connection();
            ps = con.prepareStatement("SELECT count(id) AS N FROM student_data");
            ResultSet rs = ps.executeQuery();
            if (rs.next())
                lblStudentCount.setText("Students: " + rs.getString("N"));
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(All_Information.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClearedStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClearedStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClearedStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClearedStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClearedStudents().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnStudentRestore;
    private javax.swing.JButton btnStudentsDelete;
    private javax.swing.JButton btnStudentsExport;
    private javax.swing.JComboBox<String> cb;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblStudentCount;
    private javax.swing.JLabel lblStudentsPicture;
    private javax.swing.JPanel pnlStudent;
    private javax.swing.JTextArea ta;
    private javax.swing.JTable tbl;
    private javax.swing.JTextField txtStudentsSearch;
    // End of variables declaration//GEN-END:variables
}
